{"version":3,"sources":["webpack:///./src/components/Encode.js","webpack:///./src/components/Decode.js","webpack:///./src/pages/Apps/EncodeDecode.js"],"names":["Encoding","useState","txt","result","setResult","useForm","register","handleSubmit","errors","onSubmit","data","oldLength","length","encoded","Buffer","from","JSON","stringify","toString","encodingFormat","replace","newLength","className","name","ref","required","min","maxLength","value","type","decoded","EncodeDecode"],"mappings":"+FAAA,iDA2CeA,IAxCE,WAAO,IAAD,EACOC,mBAAS,CAAEC,IAAK,uCAArCC,EADc,KACNC,EADM,OAEsBC,cAAnCC,EAFa,EAEbA,SAAUC,EAFG,EAEHA,aAAcC,EAFX,EAEWA,OAWhC,OACE,oCACE,kDACA,0BAAMC,SAAUF,GAbH,SAAAG,GACf,GAAIA,EAAM,CACR,IAAMC,EAAYD,EAAKA,KAAKE,OAEtBC,EAAUC,EAAOC,KAAKC,KAAKC,UAAUP,EAAKA,OAAOQ,SAASR,EAAKS,gBAAgBC,QAAQ,KAAM,IACnGhB,EAAU,CAAEF,IAAKW,EAASF,YAAWU,UAAWR,EAAQD,cAStD,8BAAUU,UAAWd,EAAOE,KAAO,QAAU,GAAIa,KAAK,OAAOC,IAAKlB,EAAS,CAAEmB,UAAU,EAAMC,IAAK,EAAGC,UAAW,QAChH,4BAAQL,UAAWd,EAAOW,eAAiB,QAAU,GAAII,KAAK,iBAAiBC,IAAKlB,EAAS,CAAEmB,UAAU,KACvG,4BAAQG,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,QAGF,2BAAOC,KAAK,YAGd,yBAAKP,UAAU,QACZnB,EAAOQ,UAAY,0CAAgBR,EAAOQ,WAAiB,KAC3DR,EAAOkB,UAAY,0CAAgBlB,EAAOkB,WAAiB,KAC5D,6BACA,2BAAIlB,EAAOD,U,kECrCnB,iDA2CeF,IAxCE,WAAO,IAAD,EACOC,mBAAS,CAAEC,IAAK,uCAArCC,EADc,KACNC,EADM,OAEsBC,cAAnCC,EAFa,EAEbA,SAAUC,EAFG,EAEHA,aAAcC,EAFX,EAEWA,OAWhC,OACE,oCACE,kDACA,0BAAMC,SAAUF,GAbH,SAAAG,GACf,GAAIA,EAAM,CACR,IAAMC,EAAYD,EAAKA,KAAKE,OAEtBkB,EAAUhB,EAAOC,KAAKL,EAAKA,KAAMA,EAAKS,gBAAgBD,WAAWE,QAAQ,KAAM,IACrFhB,EAAU,CAAEF,IAAK4B,EAASnB,YAAWU,UAAWS,EAAQlB,cAStD,8BAAUU,UAAWd,EAAOE,KAAO,QAAU,GAAIa,KAAK,OAAOC,IAAKlB,EAAS,CAAEmB,UAAU,EAAMC,IAAK,EAAGC,UAAW,QAChH,4BAAQL,UAAWd,EAAOW,eAAiB,QAAU,GAAII,KAAK,iBAAiBC,IAAKlB,EAAS,CAAEmB,UAAU,KACvG,4BAAQG,MAAM,SAAd,SACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,QAGF,2BAAOC,KAAK,YAGd,yBAAKP,UAAU,QACZnB,EAAOQ,UAAY,0CAAgBR,EAAOQ,WAAiB,KAC3DR,EAAOkB,UAAY,0CAAgBlB,EAAOkB,WAAiB,KAC5D,6BACA,2BAAIlB,EAAOD,U,iECrCnB,gGAMe,SAAS6B,IACtB,OACE,yBAAKT,UAAU,gBACb,iDACA,uBAAGA,UAAU,eAAb,gDAAwE,wCAAxE,2BACA,yBAAKA,UAAU,WACb,yBAAKA,UAAU,YACb,kBAAC,IAAD,OAEF,yBAAKA,UAAU,YACb,kBAAC,IAAD","file":"component---src-pages-apps-encode-decode-js-e10fc439ecd31b76b282.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst Encoding = () => {\r\n  const [result, setResult] = useState({ txt: 'your encoded result will show here' });\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const onSubmit = data => {\r\n    if (data) {\r\n      const oldLength = data.data.length;\r\n      // eslint-disable-next-line no-undef\r\n      const encoded = Buffer.from(JSON.stringify(data.data)).toString(data.encodingFormat).replace(/\"/g, '');\r\n      setResult({ txt: encoded, oldLength, newLength: encoded.length });\r\n    }\r\n  };\r\n  // console.log(watch(\"data\")); // you can watch individual input by pass the name of the input\r\n\r\n  return (\r\n    <>\r\n      <h2>Encode some stuff!</h2>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <textarea className={errors.data ? 'error' : ''} name=\"data\" ref={register({ required: true, min: 1, maxLength: 20000 })} />\r\n        <select className={errors.encodingFormat ? 'error' : ''} name=\"encodingFormat\" ref={register({ required: true })}>\r\n          <option value=\"ascii\">ascii</option>\r\n          <option value=\"utf8\">utf8</option>\r\n          <option value=\"ucs2\">ucs2</option>\r\n          <option value=\"base64\">base64</option>\r\n          <option value=\"binary\">binary</option>\r\n          <option value=\"hex\">hex</option>\r\n        </select>\r\n\r\n        <input type=\"submit\" />\r\n      </form>\r\n\r\n      <div className='card'>\r\n        {result.oldLength ? <p>Old length: {result.oldLength}</p> : null}\r\n        {result.newLength ? <p>New length: {result.newLength}</p> : null}\r\n        <hr />\r\n        <p>{result.txt}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Encoding;","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nconst Encoding = () => {\r\n  const [result, setResult] = useState({ txt: 'your decoded result will show here' });\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const onSubmit = data => {\r\n    if (data) {\r\n      const oldLength = data.data.length;\r\n      // eslint-disable-next-line no-undef\r\n      const decoded = Buffer.from(data.data, data.encodingFormat).toString().replace(/\"/g, '');\r\n      setResult({ txt: decoded, oldLength, newLength: decoded.length });\r\n    }\r\n  };\r\n  // console.log(watch(\"data\")); // you can watch individual input by pass the name of the input\r\n\r\n  return (\r\n    <>\r\n      <h2>Decode some stuff!</h2>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <textarea className={errors.data ? 'error' : ''} name=\"data\" ref={register({ required: true, min: 1, maxLength: 20000 })} />\r\n        <select className={errors.encodingFormat ? 'error' : ''} name=\"encodingFormat\" ref={register({ required: true })}>\r\n          <option value=\"ascii\">ascii</option>\r\n          <option value=\"utf8\">utf8</option>\r\n          <option value=\"ucs2\">ucs2</option>\r\n          <option value=\"base64\">base64</option>\r\n          <option value=\"binary\">binary</option>\r\n          <option value=\"hex\">hex</option>\r\n        </select>\r\n\r\n        <input type=\"submit\" />\r\n      </form>\r\n\r\n      <div className='card'>\r\n        {result.oldLength ? <p>Old length: {result.oldLength}</p> : null}\r\n        {result.newLength ? <p>New length: {result.newLength}</p> : null}\r\n        <hr />\r\n        <p>{result.txt}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Encoding;","import React from 'react';\r\n\r\n// import AnimatedBg from '../../components/AnimatedBg';\r\nimport Encode from '../../components/Encode';\r\nimport Decode from '../../components/Decode';\r\n\r\nexport default function EncodeDecode() {\r\n  return (\r\n    <div className='EncodeDecode'>\r\n      <h1>Encode and Decode</h1>\r\n      <p className='txt--center'>This application performs basic encoding via <code>Buffer</code> data type conversions.</p>\r\n      <div className='d--flex'>\r\n        <div className='d--block'>\r\n          <Encode />\r\n        </div>\r\n        <div className='d--block'>\r\n          <Decode />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"sourceRoot":""}
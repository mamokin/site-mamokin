/* stylelint-disable selector-max-compound-selectors */

/// Makes an element's :before pseudoelement a FontAwesome icon.
/// @param {string} $content Optional content value to use.
/// @param {string} $where Optional pseudoelement to target (before or after).
@mixin icon($content: false, $where: before) {
  text-decoration: none;

  &:#{$where} {
    @if $content {
      content: $content;
    }

    font-family: 'FontAwesome', serif;
    font-weight: 400;
    font-style: normal;
    text-transform: none !important; /* stylelint-disable-line */
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
  }
}

/// Applies padding to an element, taking the current element-margin value into account.
/// @param {mixed} $tb Top/bottom padding.
/// @param {mixed} $lr Left/right padding.
/// @param {list} $pad Optional extra padding (in the following order top, right, bottom, left)
/// @param {bool} $important If true, adds !important.
@mixin padding($tb, $lr, $pad: (0, 0, 0, 0), $important: null) {
  @if $important {
    $important: '!important';
  }

  $x: 0.1em;

  @if unit(_size(element-margin)) == 'rem' {
    $x: 0.1rem;
  }

  /* stylelint-disable-next-line */
  padding: ($tb + nth($pad, 1)) ($lr + nth($pad, 2)) max($x, $tb - _size(element-margin) + nth($pad, 3))
    ($lr + nth($pad, 4)) #{$important};
}

// Applies a pulsating border effect on :active
@mixin pulseBorder() {
  border: 1px solid transparent;
  outline: none;

  &:active,
  &:focus {
    animation: pulse 2s infinite;
  }
}

/// Encodes a SVG data URL so IE doesn't choke (via codepen.io/jakob-e/pen/YXXBrp).
/// @param {string} $svg SVG data URL.
/// @return {string} Encoded SVG data URL.
@function svg-url($svg) {
  $svg: str-replace($svg, '"', "'");
  $svg: str-replace($svg, '%', '%25');
  $svg: str-replace($svg, '<', '%3C');
  $svg: str-replace($svg, '>', '%3E');
  $svg: str-replace($svg, '&', '%26');
  $svg: str-replace($svg, '#', '%23');
  $svg: str-replace($svg, '{', '%7B');
  $svg: str-replace($svg, '}', '%7D');
  $svg: str-replace($svg, ';', '%3B');

  @return url('data:image/svg+xml;charset=utf8,#{$svg}');
}

// Declare as mixin because the style declarations cannot be grouped together.
@mixin txt-placeholder-shadow($color) {
  opacity: 0.75;
  text-shadow: _palette(txt-shadow);
}

// Implementation of themes
@mixin themify() {
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      $theme-map: () !global;

      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}

@mixin dimmedCard() {
  @include vendor('transform-origin', '50% 50%');
  @include vendor('transform', 'rotateX(0deg)');
  @include vendor('transition', ('opacity #{_duration(main)} ease', 'transform #{_duration(main)} ease'));
  @include padding(4.5em, 3em);

  position: relative;
  width: 27em;
  min-width: 225px;
  max-width: 100vw;
  border-radius: _size(border-radius);
  text-align: center;
  background: _palette(bg-transparent-dim);
  transition: background 1s;
  opacity: 0.95;
  cursor: default;

  p,
  h1 {
    @include vendor('transition', ('color #{_duration(main)} ease'));

    @include themify() {
      color: themed('fadedCardTxt');
    }
  }

  h1 {
    font-weight: 500;
    text-shadow: none;
  }

  & ul.icons li {
    & a,
    & a::before {
      transition: color 1s, border 1s;
    }
  }

  &:hover {
    background: _palette(bg-transparent-bright);

    p {
      color: $onyx;
    }

    h1 {
      @include themify() {
        color: themed('fadedCardTxtHover');
      }
    }

    & ul.icons li a {
      border: solid _size(border-width) _palette(border-dark);

      &::before {
        color: _palette(border-dark);
      }
    }
  }
}

@mixin transition($duration) {
  -webkit-transition: $duration;
  -moz-transition: $duration;
  -ms-transition: $duration;
  -o-transition: $duration;
  transition: $duration;
}
